Suggestions:

1. Please look at the data set and configuration files carefully

load_data.py : This file is an interface for loading the data in Python.

p3_util.py : This includes a function to visualize lidar scan data.

test_load_data.py : You can test util files with this test file.

docs/platform_config.pdf : In this file, you can see the configuration of the robot.


Encoders.mat : it has timestamp and values(4 channel count data, please look at platform_config.pdf)

Hokuyo.mat : lidar scan data (please look at load_data.py)

imu.mat : This has acceleration and angular velocity (please look at load_data.py)

2. Try dead-reckoning with encoder data and plot the robot trajectory


3. Try mapping from the first scan and plot the map


4. Try occupancy grid map and update the map with new scan data


5. Try prediction only and plot the robot trajectories (100 for N=100 particles) 


6. Try the update step with only 3-4 particles and see if the weight update makes sense


7. MapUtils 

 bresenham2D.py: a function for getMapCellsFromRay

getMapCellsFromRay is a function for mapping from scan data 

mapCorrelation is a function for registration between two scan data

8. MapUtilsCython 

Since the naive python codes of getMapCellsFromRay and mapCorrelation are very slow, we also provide Cython code for speed.

Please try mapping with naive MapUtils and then please try MapUtilsCython when you need the speed-up.

Please read "readme.txt".

9. It is not necessary to use "getMapCellsFromRay" and "mapCorrelation".

Those implementations are just one method for mapping and registration. You can define your own method for more efficiency.  


